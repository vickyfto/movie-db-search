{"version":3,"sources":["components/loading/index.tsx","components/index.ts","app/Bootstrap.app.tsx","app/Saga.app.ts","app/Reducer.app.ts","app/Store.app.ts","serviceWorker.ts","index.tsx","modules/home/Router.home.ts","modules/movie-page/Router.Movies.ts","config/Routers.cfg.ts","config/Reducers.cfg.ts","config/ReducerHooks.cfg.ts","config/Persistors.cfg.ts","config/Sagas.cfg.ts"],"names":["Loading","Layout","React","lazy","App","store","ReduxStore","loading","persistor","ReduxPersistor","Suspense","fallback","RouterNonContainer","map","route","idx","component","key","path","exact","name","render","props","reduxSaga","Sagas","all","reduxReducer","combineReducers","Reducers","Object","keys","length","constructor","initialReducer","state","hooks","action","hook","ReducerHooks","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION__","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","finalReducers","ReduxReducer","Persistors","active","persistConfig","storeConfig","persistReducer","sagaMiddleware","createSagaMiddleware","middlewares","reduxStore","createStore","applyMiddleware","run","ReduxSaga","Persistor","persistStore","Store","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","routes","RouterContainer","RouterHome","RouterMovies","DefaultPath","encryptor","createEncryptor","secretKey","onError","log","saveAuthSubsetBlacklistFilter","createBlacklistFilter","config","storage","transforms"],"mappings":"8LAOeA,EAFb,qECEIC,E,OAAcC,EAAMC,MAAK,kBAAM,uD,mLCiCtBC,G,MA3BH,WACV,OACE,kBAAC,IAAD,CAAUC,MAAOC,GACf,kBAAC,IAAD,CAAaC,QAASP,IAASQ,UAAWC,GACxC,kBAAC,IAAD,KACE,kBAAC,IAAMC,SAAP,CAAgBC,SAAUX,KACxB,kBAAC,IAAD,KACGY,IAAmBC,KAAI,SAACC,EAAYC,GAAb,OACtBD,EAAME,UACJ,kBAAC,IAAD,CACEC,IAAKF,EACLG,KAAMJ,EAAMI,KACZC,MAAOL,EAAMK,MACbC,KAAMN,EAAMM,KACZC,OAAQ,SAACC,GAAD,OAAgB,kBAACR,EAAME,UAAcM,MAE7C,QAEN,kBAAC,IAAD,CAAOJ,KAAK,IAAIG,OAAQ,SAACC,GAAD,OAAW,kBAAC,IAAWA,a,oCCxBpCC,GAAV,SAAUA,IAAV,qEACTC,IADS,gBACF,OADE,SACIC,YAAID,KADR,uC,WCAXE,EAAoBC,YAAgBC,KAExC,GAAqC,IAAjCC,OAAOC,KAAKF,KAAUG,QAAgBH,IAASI,cAAgBH,OAAQ,CAEzEH,EAAeC,YAAgB,CAAEM,eADL,eAACC,EAAD,uDAAc,GAAd,wCAAkCA,KAIhE,IAKeC,EALI,SAACD,EAAYE,GAC9B,IAAMC,EAAOC,YAAaJ,EAAOE,GACjC,OAAOV,EAAaW,EAAKH,MAAOG,EAAKD,S,wBCGjCG,G,MAAkBC,OAAOC,6BAC3BD,OAAOE,qCACPC,KAEAC,EAAqBC,EACzB,GAAIC,IAAWC,OAAQ,CACrB,IAAMC,EAAqBF,IAAWG,YACtCL,EAAgBM,yBAAeF,EAAeH,GAGhD,IAAMM,EAAiBC,cACjBC,EAAW,CACfF,GADe,mBAIyC,KAGpDG,EAAaC,YACjBX,EACAL,EAAgBiB,IAAe,WAAf,cAAmBH,MAGrCF,EAAeM,IAAIC,GAEZ,IAAMC,EAAiBC,uBAAaN,GAC9BO,EAAQP,ECjCDQ,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2DCbNC,IAAS7C,OACP,kBAAC,IAAM8C,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD+HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,a,ySE1HbC,EAbA,CACb,CACE9D,KAAM,IACNC,OAAO,EACPC,KAAM,SAER,CACEF,KAAM,QACNE,KAAM,OACNJ,UAAWd,IAAMC,MAAK,kBAAM,kCCIjB6E,EAbA,CACb,CACE9D,KAAM,SACNC,OAAO,EACPC,KAAM,UAER,CACEF,KAAM,SACNE,KAAM,QACNJ,UAAWd,IAAMC,MAAK,kBAAM,wDCJnB8E,EAAe,sBAEvBC,GAFuB,YAGvBC,IAGQvE,EAAqB,GAerBwE,EAAc,QC3BZ,KCIA9C,EANW,SAACJ,EAAYE,GAGrC,MAAO,CAAEF,QAAOE,W,0CCCZiD,EAAYC,IAAgB,CAChCC,UAAW,4CACXC,QAFgC,SAExBX,GACNC,QAAQW,IAAI,yBAA0BZ,MAIpCa,EAAgCC,gCAAsB,OAAQ,CAClE,OACA,WAaaC,EAVK,CAClB7C,QAAQ,EACRE,YAAa,CACXhC,IAAK,OACL4E,YAEAC,WAAY,CAACJ,EAA+BL,KCpBjC,O","file":"static/js/main.b5870721.chunk.js","sourcesContent":["/**\n * @author: dwi.setiyadi@gmail.com\n */\n\nconst Loading =\n  '<div className=\"animated fadeIn pt-3 text-center\">Loading...</div>';\n\nexport default Loading;\n","/**\n * @author: dwi.setiyadi@gmail.com\n */\n\nimport React from 'react';\nimport Loading from 'components/loading';\n\nconst Layout: any = React.lazy(() => import('components/layout'));\n\nexport { Layout, Loading };\n","/**\n * @author: dwi.setiyadi@gmail.com\n */\n\nimport React from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { ReduxPersistor, ReduxStore } from 'app';\nimport { Layout, Loading } from 'components';\nimport { RouterNonContainer } from 'config';\nimport 'assets/styles/app.scss';\n\nconst App = () => {\n  return (\n    <Provider store={ReduxStore}>\n      <PersistGate loading={Loading} persistor={ReduxPersistor}>\n        <HashRouter>\n          <React.Suspense fallback={Loading}>\n            <Switch>\n              {RouterNonContainer.map((route: any, idx: number) =>\n                route.component ? (\n                  <Route\n                    key={idx} // eslint-disable-line\n                    path={route.path}\n                    exact={route.exact}\n                    name={route.name}\n                    render={(props: any) => <route.component {...props} />}\n                  />\n                ) : null\n              )}\n              <Route path=\"/\" render={(props) => <Layout {...props} />} />\n            </Switch>\n          </React.Suspense>\n        </HashRouter>\n      </PersistGate>\n    </Provider>\n  );\n};\n\nexport default App;\n","/**\n * @author: dwi.setiyadi@gmail.com\n */\n\nimport { all } from 'redux-saga/effects';\nimport { Sagas } from 'config';\n\nexport default function* reduxSaga() {\n  if (Sagas) yield all(Sagas);\n}\n","/**\n * @author: dwi.setiyadi@gmail.com\n */\n\nimport { combineReducers } from 'redux';\nimport { Reducers, ReducerHooks } from 'config';\n\nlet reduxReducer: any = combineReducers(Reducers);\n\nif (Object.keys(Reducers).length === 0 && Reducers.constructor === Object) {\n  const initialReducer: any = (state: any = [], action: any) => state;\n  reduxReducer = combineReducers({ initialReducer } as any);\n}\n\nconst hooks: any = (state: any, action: any) => {\n  const hook = ReducerHooks(state, action);\n  return reduxReducer(hook.state, hook.action);\n};\n\nexport default hooks;\n","/**\n * @author: dwi.setiyadi@gmail.com\n */\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\n\nimport { ReduxSaga, ReduxReducer } from 'app';\nimport { Persistors } from 'config';\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION__: any;\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__: any;\n  }\n}\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION__\n  ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n  : compose;\n\nlet finalReducers: any = ReduxReducer;\nif (Persistors.active) {\n  const persistConfig: any = Persistors.storeConfig;\n  finalReducers = persistReducer(persistConfig, ReduxReducer);\n}\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [\n  sagaMiddleware,\n\n  // place logger middleware for development only\n  ...(process.env.NODE_ENV === 'development' ? [logger] : []),\n];\n\nconst reduxStore = createStore(\n  finalReducers,\n  composeEnhancer(applyMiddleware(...middlewares))\n);\n\nsagaMiddleware.run(ReduxSaga);\n\nexport const Persistor: any = persistStore(reduxStore);\nexport const Store = reduxStore;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from 'app';\nimport * as serviceWorker from 'serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.register();\nserviceWorker.unregister();\n","/**\n * @author: dwi.setiyadi@gmail.com\n */\n\nimport React from 'react';\n\n// https://github.com/ReactTraining/react-router/tree/master/packages/react-router-config\nconst routes = [\n  {\n    path: '/',\n    exact: true,\n    name: 'Index',\n  },\n  {\n    path: '/home',\n    name: 'Home',\n    component: React.lazy(() => import('modules/home/pages/Home.page')),\n  },\n];\n\nexport default routes;\n","/**\n * @author: dwi.setiyadi@gmail.com\n */\n\nimport React from 'react';\n\n// https://github.com/ReactTraining/react-router/tree/master/packages/react-router-config\nconst routes = [\n  {\n    path: '/movie',\n    exact: true,\n    name: 'Movies',\n  },\n  {\n    path: '/movie',\n    name: 'Movie',\n    component: React.lazy(() => import('modules/movie-page/Movie.page')),\n  },\n];\n\nexport default routes;\n","/**\n * @author: dwi.setiyadi@gmail.com\n */\n\nimport React from 'react'; // eslint-disable-line\n\n// https://github.com/ReactTraining/react-router/tree/master/packages/react-router-config\n// import RouterExample from '../modules/example/RouterExample';\n\nimport RouterHome from 'modules/home/Router.home';\nimport RouterMovies from 'modules/movie-page/Router.Movies';\n\nexport const RouterContainer = [\n  // ...RouterExample,\n  ...RouterHome,\n  ...RouterMovies,\n];\n\nexport const RouterNonContainer = [\n  // {\n  //   path: '/404',\n  //   exact: true,\n  //   name: '404 Not Found',\n  //   component: React.lazy(() => import('../modules/example/views/Pages/Page404/Page404')),\n  // },\n  // {\n  //   path: '/500',\n  //   exact: true,\n  //   name: '500 Internal Server Error',\n  //   component: React.lazy(() => import('../modules/example/views/Pages/Page500/Page500')),\n  // },\n];\n\nexport const DefaultPath = '/home';\n","/**\n * @author: dwi.setiyadi@gmail.com\n */\n\n// import { ReducerSome } from '../modules/auth/ReducerSome';\n\nexport default {\n  // some: ReducerSome,\n};\n","/**\n * @author: dwi.setiyadi@gmail.com\n */\n\nconst ReducerHooks: any = (state: any, action: any) => {\n  // do your hook here\n\n  return { state, action };\n};\n\nexport default ReducerHooks;\n","/**\n * @author: dwi.setiyadi@gmail.com\n */\n\nimport storage from 'redux-persist/lib/storage';\nimport createEncryptor from 'redux-persist-transform-encrypt';\nimport { createBlacklistFilter } from 'redux-persist-transform-filter';\n\nconst encryptor = createEncryptor({\n  secretKey: 'abang-baso-jangan-kasih-tau-sipa-siapa-ya',\n  onError(error) {\n    console.log('createEncryptor error ', error); // eslint-disable-line\n  },\n});\n\nconst saveAuthSubsetBlacklistFilter = createBlacklistFilter('auth', [\n  'data',\n  'action',\n]);\n\nconst config: any = {\n  active: true,\n  storeConfig: {\n    key: 'root',\n    storage,\n    //whitelist: ['auth', 'notification'],\n    transforms: [saveAuthSubsetBlacklistFilter, encryptor],\n  },\n};\n\nexport default config;\n","/**\n * @author: dwi.setiyadi@gmail.com\n */\n\n// import { watcherModules } from '../modules/some/SagaSome';\n\nexport default [\n  // ...watcherModules,\n];\n"],"sourceRoot":""}